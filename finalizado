#include <stdio.h>
#include <string.h>

typedef struct {
    char pais[50];
    unsigned long int pop;
    float area;
    float pib;
    int pt_turisticos;
    float densidade;
} Carta;

// Função para ler os dados da carta
void lerCarta(Carta *carta, int numero) {
    printf("\n--- Preenchendo dados da Carta %d ---\n", numero);

    getchar(); // Limpar o buffer antes do fgets
    printf("Nome do país: ");
    fgets(carta->pais, 50, stdin);
    carta->pais[strcspn(carta->pais, "\n")] = 0; // Remove \n

    printf("População: ");
    scanf("%lu", &carta->pop);

    printf("Área (em km²): ");
    scanf("%f", &carta->area);

    printf("PIB (em bilhões R$): ");
    scanf("%f", &carta->pib);

    printf("Número de pontos turísticos: ");
    scanf("%d", &carta->pt_turisticos);

    // Cálculo da densidade
    carta->densidade = carta->pop / carta->area;
}

// Função para exibir os dados da carta
void exibirCarta(Carta c, int numero) {
    printf("\n--- Carta %d ---\n", numero);
    printf("País: %s\n", c.pais);
    printf("População: %lu\n", c.pop);
    printf("Área: %.2f km²\n", c.area);
    printf("PIB: %.2f bilhões R$\n", c.pib);
    printf("Pontos turísticos: %d\n", c.pt_turisticos);
    printf("Densidade demográfica: %.2f hab/km²\n", c.densidade);
}

// Função para mostrar o menu de atributos
void mostrarMenu(int bloqueado) {
    printf("\nEscolha um atributo para comparação:\n");
    if (bloqueado != 1) printf("1 - População\n");
    if (bloqueado != 2) printf("2 - Área\n");
    if (bloqueado != 3) printf("3 - PIB\n");
    if (bloqueado != 4) printf("4 - Pontos Turísticos\n");
    if (bloqueado != 5) printf("5 - Densidade Demográfica (menor vence)\n");
}

// Função para obter o valor numérico comparável de um atributo
float obterValor(Carta c, int atributo) {
    switch (atributo) {
        case 1: return (float)c.pop;
        case 2: return c.area;
        case 3: return c.pib;
        case 4: return (float)c.pt_turisticos;
        case 5: return c.densidade;
        default: return 0;
    }
}

// Função para exibir o nome do atributo
const char* nomeAtributo(int atributo) {
    switch (atributo) {
        case 1: return "População";
        case 2: return "Área";
        case 3: return "PIB";
        case 4: return "Pontos Turísticos";
        case 5: return "Densidade Demográfica";
        default: return "Desconhecido";
    }
}

// Função principal
int main() {
    Carta carta1, carta2;
    int atributo1 = 0, atributo2 = 0;
    float valor1c1, valor1c2, valor2c1, valor2c2;
    float somaC1, somaC2;

    printf("=== Jogo SuperTrunfo: Cartas de Países ===\n");

    lerCarta(&carta1, 1);
    lerCarta(&carta2, 2);

    exibirCarta(carta1, 1);
    exibirCarta(carta2, 2);

    // Escolha do primeiro atributo
    do {
        mostrarMenu(0);
        printf("Escolha o primeiro atributo (1 a 5): ");
        scanf("%d", &atributo1);

        if (atributo1 < 1 || atributo1 > 5) {
            printf("Opção inválida. Tente novamente.\n");
        }
    } while (atributo1 < 1 || atributo1 > 5);

    // Escolha do segundo atributo (diferente do primeiro)
    do {
        mostrarMenu(atributo1);
        printf("Escolha o segundo atributo (diferente do primeiro): ");
        scanf("%d", &atributo2);

        if (atributo2 < 1 || atributo2 > 5 || atributo2 == atributo1) {
            printf("Opção inválida ou repetida. Tente novamente.\n");
        }
    } while (atributo2 < 1 || atributo2 > 5 || atributo2 == atributo1);

    // Obter os valores para cada carta e atributo
    valor1c1 = obterValor(carta1, atributo1);
    valor1c2 = obterValor(carta2, atributo1);

    valor2c1 = obterValor(carta1, atributo2);
    valor2c2 = obterValor(carta2, atributo2);

    // Comparar individualmente
    printf("\n--- Comparação por Atributos ---\n");

    printf("%s:\n", nomeAtributo(atributo1));
    printf("%s: %.2f | %s: %.2f\n", carta1.pais, valor1c1, carta2.pais, valor1c2);

    if ((atributo1 == 5 && valor1c1 < valor1c2) || (atributo1 != 5 && valor1c1 > valor1c2))
        printf("-> %s venceu neste atributo!\n", carta1.pais);
    else if ((atributo1 == 5 && valor1c2 < valor1c1) || (atributo1 != 5 && valor1c2 > valor1c1))
        printf("-> %s venceu neste atributo!\n", carta2.pais);
    else
        printf("-> Empate neste atributo.\n");

    printf("\n%s:\n", nomeAtributo(atributo2));
    printf("%s: %.2f | %s: %.2f\n", carta1.pais, valor2c1, carta2.pais, valor2c2);

    if ((atributo2 == 5 && valor2c1 < valor2c2) || (atributo2 != 5 && valor2c1 > valor2c2))
        printf("-> %s venceu neste atributo!\n", carta1.pais);
    else if ((atributo2 == 5 && valor2c2 < valor2c1) || (atributo2 != 5 && valor2c2 > valor2c1))
        printf("-> %s venceu neste atributo!\n", carta2.pais);
    else
        printf("-> Empate neste atributo.\n");

    // Soma dos valores (para o critério final de desempate)
    somaC1 = valor1c1 + valor2c1;
    somaC2 = valor1c2 + valor2c2;

    printf("\n--- Resultado Final ---\n");
    printf("Soma dos Atributos:\n");
    printf("%s: %.2f\n", carta1.pais, somaC1);
    printf("%s: %.2f\n", carta2.pais, somaC2);

    if (somaC1 > somaC2)
        printf(">> Vencedora da rodada: %s!\n", carta1.pais);
    else if (somaC2 > somaC1)
        printf(">> Vencedora da rodada: %s!\n", carta2.pais);
    else
        printf(">> Empate!\n");

    return 0;
}
